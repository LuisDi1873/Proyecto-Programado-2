#include <stdio.h>   
#include <stdlib.h>  
#include <string.h>

#define array_size(a) (sizeof(a)/sizeof(*a))
#define BUFFER_SIZE (4)
#define DESCRIPTION_BUFFER_SIZE (32)
#define IN_CHARGE_BUFFER_SIZE (32)
#define ID_BUFFER_SIZE (11)

typedef void(*action_t)(void);

typedef struct
{
  char* msg;
  action_t action;
} menu_item_t;

typedef enum
{
  OPERATIVE,
  APPROVAL,
  CONTRACT,
  MANAGEMENT,
  CHANGE,
  INVALID_TASK
} task_type_t;

typedef struct
{
  char data[DESCRIPTION_BUFFER_SIZE];
} desc_t;

typedef struct
{
  char data[IN_CHARGE_BUFFER_SIZE];
} incharge_t;

typedef struct
{
  int         id;
  /* char*       description; */
  desc_t      description;
  task_type_t type;
  int         effort;
  int         time;
  /* char*       in_charge; */
  incharge_t  in_charge;
} task_t;

typedef enum
{
  TXT,
  IMG
} doc_type_t;

typedef struct
{
  int        id;
  char*      route;
  char*      description;
  doc_type_t type;
} doc_t;

typedef enum
{
  INVALID_RESOURCE
} res_type_t;

typedef struct
{
  int        id;
  char*      name;
  res_type_t type;
  int        capacity;
  int        available_amount;
  char*      in_charge;
} resource_t;

typedef struct node node_t;

struct node
{
  task_t task;
  node_t* prev;
  node_t* next;
};

typedef struct
{
  node_t* head;
  node_t* tail;
} list_t;
void
meta_menu (menu_item_t* items, int items_len, bool *loop_close_cond);

void
input_task (void);

static inline void
main_quit (void);

char const*
task_type_str(task_type_t type);

static inline void
meta_prompt (menu_item_t* items, int items_len);

static inline void
input_task_quit (void);

task_t
prompt_task_input (void);

/* global variable declarations */
static bool main_close = false;
static bool task_input_close = false;
static bool description_input_close = false;

static menu_item_t main_items[] = {
  {
    .msg = "input task",
    .action = input_task
  },
  {
    .msg = "quit",
    .action = main_quit
  }
};
int main_items_len = array_size(main_items);

list_t tasks = {
  .head = NULL,
  .tail = NULL
};

void
clear_list (list_t* list)
{
  node_t* head = list->head;
  node_t* it = head;
  node_t* tmp;
  /* int iterator = 0; */
  while (it != NULL)
  {
    tmp = it->next;
    free (it);
    /* printf ("%s\n", (char*)&it->task.description); */
    it = tmp;
    /* iterator++; */
  }
  /* printf ("iterator: %d clear_list\n", iterator); */
  list->head = NULL;
  list->tail = NULL;
}

void
push (list_t* list, task_t t)
{
  node_t* new = (node_t*)malloc (sizeof(*new));
  new->task = t;
  new->next = NULL;
  new->prev = NULL;
  if (list->tail == NULL)
  {
    list->head = new;
    list->tail = new;
  }
  else
  {
    list->tail->next = new;
    new->prev = list->tail;
    list->tail = new;
  }
}

static inline void
closed_task_input (void)
{
  task_t t = prompt_task_input ();
  push (&tasks, t);
}

static menu_item_t task_input_items[] = {
  {
    .msg = "input task",
    .action = closed_task_input
  },
  {
    .msg = "quit",
    .action = input_task_quit
  }
};
static int task_input_items_len = array_size(task_input_items);

static char buffer[BUFFER_SIZE] = { 0 };

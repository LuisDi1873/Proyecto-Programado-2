/*
 * This program requires an ISO C99 standard compliant compiler
 * it has been tested with GCC to compile into correct binaries
 * with the command
 *
 *   gcc -std=c99 -Wall -Wextra -pedantic -Werror -o aptec aptec.c
 *
 * with GCC 12.2.0
 */

/* include declarations */
#include <assert.h> /* assert () */
#include <limits.h> /* INT_MAX */
#include <stdbool.h> /* bool */
#include <stddef.h>  /* NULL */
#include <stdio.h>   /* printf(), fgets() */
#include <stdlib.h>  /* EXIT_SUCCESS */
#include <string.h>  /* memcpy(), memset() */

/*****************************************************************************/
/* macro declarations */
/*****************************************************************************/
#define array_size(a) (sizeof (a) / sizeof (*a))
#define UNUSED(x) (void)x

#define INTERNAL static
#define global_variable static

#define BUFFER_SIZE (8)
#define DESCRIPTION_BUFFER_SIZE (32)
#define NAME_BUFFER_SIZE (32)
#define ROUTE_BUFFER_SIZE (255)
#define DOC_PERSISTENCE_BUFFER_SIZE (512)
#define IN_CHARGE_BUFFER_SIZE (32)
#define ID_BUFFER_SIZE (11)
#define TNODE_SPACING (11)

/* ALL IDs must be positive integers */
#define INVALID_ID (0)

/* IMPORTANT: braces around the 0 */
#define BUF_INITIALIZER {0}

/* IMPORTANT: braces around the 0 */
#define DOC_T_INITIALIZER {0}
#define TASK_T_INITIALIZER {0}
#define PERSIST_TASK_T_INITIALIZER {0}
#define DESC_T_INITIALIZER {0}
#define ROUTE_T_INITIALIZER {0}
#define INCHARGE_T_INITIALIZER {0}
#define RESOURCE_T_INITIALIZER {0}

#define TASKS_PERSISTENCE_FILE "tasks.txt"
#define RESOURCES_PERSISTENCE_FILE "resources.txt"
#define EDGES_PERSISTENCE_FILE "edges.txt"

/*****************************************************************************/
/* type declarations */
/*****************************************************************************/
/* function type for menu prompt */
typedef void (*action_t) (void);

/* structure to hold menu item message and action pointer */
typedef struct
{
  char *msg;
  action_t action;
} menu_item_t;

/* structure type to easily assign strings */
typedef struct
{
  char data[DESCRIPTION_BUFFER_SIZE];
} desc_t;

/* structure type to easily assign strings */
typedef desc_t name_t;

/* structure type to easily assign strings */
typedef struct
{
  char data[ROUTE_BUFFER_SIZE];
} route_t;

/* structure type to easily assign strings */
typedef struct
{
  char data[IN_CHARGE_BUFFER_SIZE];
} incharge_t;

typedef int doc_type_t;
/* structure to hold document data */
typedef struct
{
  int id;
  route_t route;
  desc_t description;
  doc_type_t type;
} doc_t;

/* forward-declare a tree node structure */
typedef struct tnode tnode_t;
/* structure to hold task data */
struct tnode
{
  doc_t doc;
  tnode_t *l;
  tnode_t *r;
};

/* enumeration of task types, and a debugging invalid type */
typedef enum
{
  OPERATIVE,
  APPROVAL,
  CONTRACT,
  MANAGEMENT,
  CHANGE,
  INVALID_TASK
} task_type_t;

/* structure to hold task data */
typedef struct
{
  int id;
  desc_t description;
  task_type_t type;
  int effort;
  int time;
  incharge_t in_charge;
  tnode_t docs;
} task_t;

typedef struct
{
  int id;
  desc_t description;
  task_type_t type;
  int effort;
  int time;
  incharge_t in_charge;
  doc_t doc;
} persist_task_t;

/* same as task types */
typedef task_type_t res_type_t;

/* structure to hold resource data */
typedef struct
{
  int id;
  name_t name;
  res_type_t type;
  int capacity;
  int available_amount;
  incharge_t in_charge;
} resource_t;

/* forward-declare a task_node_t structure */
typedef struct task_node task_node_t;
/* structure to hold task data */
struct task_node
{
  task_t task;
  task_node_t *prev;
  task_node_t *next;
};

/* convenience structure to hold list references */
typedef struct
{
  task_node_t *head;
  task_node_t *tail;
  size_t size;
} task_list_t;

/* forward-declare a task_node_t structure */
typedef struct res_node res_node_t;
/* structure to hold task data */
struct res_node
{
  resource_t resource;
  res_node_t *prev;
  res_node_t *next;
};

/* convenience structure to hold resource references */
typedef struct
{
  res_node_t *head;
  res_node_t *tail;
} res_list_t;

/* structure to hold adjacency information */
typedef struct
{
  int src;
  int dst;
  int cost;
} edge_t;

/* structure to hold adjacency information node */
typedef struct edge_node edge_node_t;
struct edge_node
{
  edge_t edge;
  edge_node_t* prev;
  edge_node_t* next;
};

/* convenience structure to hold adjacency information list */
typedef struct
{
  edge_node_t* head;
  edge_node_t* tail;
} edge_list_t;

typedef struct
{
  int* parents;
  int* shortest_distances;
  int count; /* same count for parents  and shortest_distances */
} dijkstra_solution_t;

